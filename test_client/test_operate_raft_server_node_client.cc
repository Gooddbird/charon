/*************************************************************
 * 
 *  #####   ###   #     #    #		 #     #####    #####     ####
 *    #			 #    #	#	  #			#		#			 #  #	  	#		#		 #
 *    #			 #    #		# #				#				 ###			#####    #		
 *    #			###   #		  #				#				 #   #		#					####
 *
 * test_operate_raft_server_node_client.cc
 * Generated by tinyrpc framework tinyrpc_generator.py
 * Create Time: 2022-11-19 16:24:34
 * This file will not be overwrite althrough protobuf file changed !!!
 * Just write this file while not exist
*************************************************************/


#include <google/protobuf/service.h>
#include "tinyrpc/net/tinypb/tinypb_rpc_channel.h"
#include "tinyrpc/net/tinypb/tinypb_rpc_async_channel.h"
#include "tinyrpc/net/tinypb/tinypb_rpc_controller.h"
#include "tinyrpc/net/tinypb/tinypb_rpc_closure.h"
#include "tinyrpc/net/net_address.h"
#include "charon/pb/charon.pb.h"


void test_client() {

  tinyrpc::IPAddress::ptr addr = std::make_shared<tinyrpc::IPAddress>("0.0.0.0", 39999);

  tinyrpc::TinyPbRpcChannel channel(addr);
  CharonService_Stub stub(&channel);

  tinyrpc::TinyPbRpcController rpc_controller;
  rpc_controller.SetTimeout(5000);

  ::OperateRaftServerNodeRequest rpc_req;
  ::OperateRaftServerNodeResponse rpc_res;

  std::cout << "Send to tinyrpc server " << addr->toString() << ", requeset body: " << rpc_req.ShortDebugString() << std::endl;
  stub.OperateRaftServerNode(&rpc_controller, &rpc_req, &rpc_res, NULL);

  if (rpc_controller.ErrorCode() != 0) {
    std::cout << "Failed to call tinyrpc server, error code: " << rpc_controller.ErrorCode() << ", error info: " << rpc_controller.ErrorText() << std::endl; 
    return;
  }

  std::cout << "Success get response frrom tinyrpc server " << addr->toString() << ", response body: " << rpc_res.ShortDebugString() << std::endl;

} 

int main(int argc, char* argv[]) {

  test_client();

  return 0;
}
