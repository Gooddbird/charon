syntax = "proto3";
option cc_generic_services = true;

enum VoteResult {
  UNKNOWN = 0;
  VOTE_SUCC = 1;
  VOTE_FAILED = 2;
};

message LogEntry {
  int32 index = 1;
  int32 term = 2;
  string cmd = 3;
};

message AskVoteRequest {
  // the candidate's term
  int32 candidate_term = 1;
  // the candidate's id
  int32 candidate_id = 2;

  // the last log entry term of candidate
  int32 last_log_term = 3;
  // the last log entry index of candidate
  int32 last_log_index = 4;

  int32 node_id = 5;

  string node_name = 6;

  string node_addr = 7;

};

message AskVoteResponse {
  int32 ret_code = 1;
  string res_info = 2;

  // current term
  int32 term = 3;
  // 1 -- give a vote, otherwise not give
  VoteResult vote_result = 4;
  // why not vote
  string vote_fail_reason = 5;

  int32 node_id = 6;

  string node_name = 7;

  string node_addr = 8;
};

message AppendLogEntriesRequest {
  // the leader's term
  int32 leader_term = 1;
  // the leader's id
  int32 leader_id = 2;
  // the prev log' index of new log entries 
  int32 prev_log_index = 3;
  // the prev log' term of new log entries 
  int32 prev_log_term = 4;

  // the leader's max high commit log entry index
  int32 leader_commit_index = 5;


  repeated LogEntry log_entries = 6;

  int32 node_id = 7;

  string node_name = 8;

  string node_addr = 9;

};

message AppendLogEntriesResponse {
  int32 ret_code = 1;
  string res_info = 2;
  // the follewer's term
  int32 term = 3;

  // 1 -- follewer append log entries success, otherwise failed
  int32 append_result = 4;
  // reason of append log why failed
  string append_fail_reason = 5;

  int32 node_id = 6;

  string node_name = 7;

  string node_addr = 8;
};

service RaftService {
  // these are raft algorithm rpc

  // ask server to obtain a vote, to help become leader
  rpc AskVote(AskVoteRequest) returns (AskVoteResponse);

  // only leader call, to append log to other followers 
  rpc AppendLogEntries(AppendLogEntriesRequest) returns (AppendLogEntriesResponse);


}