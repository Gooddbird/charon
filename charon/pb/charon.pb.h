// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: charon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_charon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_charon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_charon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_charon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_charon_2eproto;
class DiscoverRequest;
struct DiscoverRequestDefaultTypeInternal;
extern DiscoverRequestDefaultTypeInternal _DiscoverRequest_default_instance_;
class DiscoverResponse;
struct DiscoverResponseDefaultTypeInternal;
extern DiscoverResponseDefaultTypeInternal _DiscoverResponse_default_instance_;
class DiscoverTag;
struct DiscoverTagDefaultTypeInternal;
extern DiscoverTagDefaultTypeInternal _DiscoverTag_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
struct RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DiscoverRequest* Arena::CreateMaybeMessage<::DiscoverRequest>(Arena*);
template<> ::DiscoverResponse* Arena::CreateMaybeMessage<::DiscoverResponse>(Arena*);
template<> ::DiscoverTag* Arena::CreateMaybeMessage<::DiscoverTag>(Arena*);
template<> ::RegisterRequest* Arena::CreateMaybeMessage<::RegisterRequest>(Arena*);
template<> ::RegisterResponse* Arena::CreateMaybeMessage<::RegisterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DiscoverTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiscoverTag) */ {
 public:
  inline DiscoverTag() : DiscoverTag(nullptr) {}
  ~DiscoverTag() override;
  explicit PROTOBUF_CONSTEXPR DiscoverTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverTag(const DiscoverTag& from);
  DiscoverTag(DiscoverTag&& from) noexcept
    : DiscoverTag() {
    *this = ::std::move(from);
  }

  inline DiscoverTag& operator=(const DiscoverTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverTag& operator=(DiscoverTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoverTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverTag* internal_default_instance() {
    return reinterpret_cast<const DiscoverTag*>(
               &_DiscoverTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DiscoverTag& a, DiscoverTag& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoverTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoverTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscoverTag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiscoverTag";
  }
  protected:
  explicit DiscoverTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTag1FieldNumber = 1,
    kTag2FieldNumber = 2,
    kTag3FieldNumber = 3,
  };
  // int32 tag1 = 1;
  void clear_tag1();
  int32_t tag1() const;
  void set_tag1(int32_t value);
  private:
  int32_t _internal_tag1() const;
  void _internal_set_tag1(int32_t value);
  public:

  // int32 tag2 = 2;
  void clear_tag2();
  int32_t tag2() const;
  void set_tag2(int32_t value);
  private:
  int32_t _internal_tag2() const;
  void _internal_set_tag2(int32_t value);
  public:

  // int32 tag3 = 3;
  void clear_tag3();
  int32_t tag3() const;
  void set_tag3(int32_t value);
  private:
  int32_t _internal_tag3() const;
  void _internal_set_tag3(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DiscoverTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t tag1_;
  int32_t tag2_;
  int32_t tag3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_charon_2eproto;
};
// -------------------------------------------------------------------

class DiscoverRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiscoverRequest) */ {
 public:
  inline DiscoverRequest() : DiscoverRequest(nullptr) {}
  ~DiscoverRequest() override;
  explicit PROTOBUF_CONSTEXPR DiscoverRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverRequest(const DiscoverRequest& from);
  DiscoverRequest(DiscoverRequest&& from) noexcept
    : DiscoverRequest() {
    *this = ::std::move(from);
  }

  inline DiscoverRequest& operator=(const DiscoverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverRequest& operator=(DiscoverRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoverRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverRequest* internal_default_instance() {
    return reinterpret_cast<const DiscoverRequest*>(
               &_DiscoverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DiscoverRequest& a, DiscoverRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoverRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoverRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscoverRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiscoverRequest";
  }
  protected:
  explicit DiscoverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 1,
    kTagFieldNumber = 2,
  };
  // string server_name = 1;
  void clear_server_name();
  const std::string& server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // .DiscoverTag tag = 2;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::DiscoverTag& tag() const;
  PROTOBUF_NODISCARD ::DiscoverTag* release_tag();
  ::DiscoverTag* mutable_tag();
  void set_allocated_tag(::DiscoverTag* tag);
  private:
  const ::DiscoverTag& _internal_tag() const;
  ::DiscoverTag* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::DiscoverTag* tag);
  ::DiscoverTag* unsafe_arena_release_tag();

  // @@protoc_insertion_point(class_scope:DiscoverRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::DiscoverTag* tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_charon_2eproto;
};
// -------------------------------------------------------------------

class DiscoverResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiscoverResponse) */ {
 public:
  inline DiscoverResponse() : DiscoverResponse(nullptr) {}
  ~DiscoverResponse() override;
  explicit PROTOBUF_CONSTEXPR DiscoverResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverResponse(const DiscoverResponse& from);
  DiscoverResponse(DiscoverResponse&& from) noexcept
    : DiscoverResponse() {
    *this = ::std::move(from);
  }

  inline DiscoverResponse& operator=(const DiscoverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverResponse& operator=(DiscoverResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoverResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverResponse* internal_default_instance() {
    return reinterpret_cast<const DiscoverResponse*>(
               &_DiscoverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DiscoverResponse& a, DiscoverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoverResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoverResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscoverResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiscoverResponse";
  }
  protected:
  explicit DiscoverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kServerNameFieldNumber = 3,
    kAddrFieldNumber = 5,
    kTagFieldNumber = 4,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // string server_name = 3;
  void clear_server_name();
  const std::string& server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // string addr = 5;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // .DiscoverTag tag = 4;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::DiscoverTag& tag() const;
  PROTOBUF_NODISCARD ::DiscoverTag* release_tag();
  ::DiscoverTag* mutable_tag();
  void set_allocated_tag(::DiscoverTag* tag);
  private:
  const ::DiscoverTag& _internal_tag() const;
  ::DiscoverTag* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::DiscoverTag* tag);
  ::DiscoverTag* unsafe_arena_release_tag();

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DiscoverResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::DiscoverTag* tag_;
  int32_t ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_charon_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 1,
    kAddrFieldNumber = 2,
    kTagFieldNumber = 3,
  };
  // string server_name = 1;
  void clear_server_name();
  const std::string& server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // .DiscoverTag tag = 3;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::DiscoverTag& tag() const;
  PROTOBUF_NODISCARD ::DiscoverTag* release_tag();
  ::DiscoverTag* mutable_tag();
  void set_allocated_tag(::DiscoverTag* tag);
  private:
  const ::DiscoverTag& _internal_tag() const;
  ::DiscoverTag* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::DiscoverTag* tag);
  ::DiscoverTag* unsafe_arena_release_tag();

  // @@protoc_insertion_point(class_scope:RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::DiscoverTag* tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_charon_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {}
  ~RegisterResponse() override;
  explicit PROTOBUF_CONSTEXPR RegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterResponse(const RegisterResponse& from);
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterResponse";
  }
  protected:
  explicit RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  int32_t ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_charon_2eproto;
};
// ===================================================================

class CharonService_Stub;

class CharonService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CharonService() {};
 public:
  virtual ~CharonService();

  typedef CharonService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void DiscoverServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DiscoverRequest* request,
                       ::DiscoverResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RegisterServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::RegisterRequest* request,
                       ::RegisterResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CharonService);
};

class CharonService_Stub : public CharonService {
 public:
  CharonService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  CharonService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~CharonService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements CharonService ------------------------------------------

  void DiscoverServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DiscoverRequest* request,
                       ::DiscoverResponse* response,
                       ::google::protobuf::Closure* done);
  void RegisterServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::RegisterRequest* request,
                       ::RegisterResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CharonService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DiscoverTag

// int32 tag1 = 1;
inline void DiscoverTag::clear_tag1() {
  tag1_ = 0;
}
inline int32_t DiscoverTag::_internal_tag1() const {
  return tag1_;
}
inline int32_t DiscoverTag::tag1() const {
  // @@protoc_insertion_point(field_get:DiscoverTag.tag1)
  return _internal_tag1();
}
inline void DiscoverTag::_internal_set_tag1(int32_t value) {
  
  tag1_ = value;
}
inline void DiscoverTag::set_tag1(int32_t value) {
  _internal_set_tag1(value);
  // @@protoc_insertion_point(field_set:DiscoverTag.tag1)
}

// int32 tag2 = 2;
inline void DiscoverTag::clear_tag2() {
  tag2_ = 0;
}
inline int32_t DiscoverTag::_internal_tag2() const {
  return tag2_;
}
inline int32_t DiscoverTag::tag2() const {
  // @@protoc_insertion_point(field_get:DiscoverTag.tag2)
  return _internal_tag2();
}
inline void DiscoverTag::_internal_set_tag2(int32_t value) {
  
  tag2_ = value;
}
inline void DiscoverTag::set_tag2(int32_t value) {
  _internal_set_tag2(value);
  // @@protoc_insertion_point(field_set:DiscoverTag.tag2)
}

// int32 tag3 = 3;
inline void DiscoverTag::clear_tag3() {
  tag3_ = 0;
}
inline int32_t DiscoverTag::_internal_tag3() const {
  return tag3_;
}
inline int32_t DiscoverTag::tag3() const {
  // @@protoc_insertion_point(field_get:DiscoverTag.tag3)
  return _internal_tag3();
}
inline void DiscoverTag::_internal_set_tag3(int32_t value) {
  
  tag3_ = value;
}
inline void DiscoverTag::set_tag3(int32_t value) {
  _internal_set_tag3(value);
  // @@protoc_insertion_point(field_set:DiscoverTag.tag3)
}

// -------------------------------------------------------------------

// DiscoverRequest

// string server_name = 1;
inline void DiscoverRequest::clear_server_name() {
  server_name_.ClearToEmpty();
}
inline const std::string& DiscoverRequest::server_name() const {
  // @@protoc_insertion_point(field_get:DiscoverRequest.server_name)
  return _internal_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoverRequest::set_server_name(ArgT0&& arg0, ArgT... args) {
 
 server_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DiscoverRequest.server_name)
}
inline std::string* DiscoverRequest::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:DiscoverRequest.server_name)
  return _s;
}
inline const std::string& DiscoverRequest::_internal_server_name() const {
  return server_name_.Get();
}
inline void DiscoverRequest::_internal_set_server_name(const std::string& value) {
  
  server_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoverRequest::_internal_mutable_server_name() {
  
  return server_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoverRequest::release_server_name() {
  // @@protoc_insertion_point(field_release:DiscoverRequest.server_name)
  return server_name_.Release();
}
inline void DiscoverRequest::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocated(server_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_name_.IsDefault()) {
    server_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DiscoverRequest.server_name)
}

// .DiscoverTag tag = 2;
inline bool DiscoverRequest::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool DiscoverRequest::has_tag() const {
  return _internal_has_tag();
}
inline void DiscoverRequest::clear_tag() {
  if (GetArenaForAllocation() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
inline const ::DiscoverTag& DiscoverRequest::_internal_tag() const {
  const ::DiscoverTag* p = tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::DiscoverTag&>(
      ::_DiscoverTag_default_instance_);
}
inline const ::DiscoverTag& DiscoverRequest::tag() const {
  // @@protoc_insertion_point(field_get:DiscoverRequest.tag)
  return _internal_tag();
}
inline void DiscoverRequest::unsafe_arena_set_allocated_tag(
    ::DiscoverTag* tag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DiscoverRequest.tag)
}
inline ::DiscoverTag* DiscoverRequest::release_tag() {
  
  ::DiscoverTag* temp = tag_;
  tag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DiscoverTag* DiscoverRequest::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:DiscoverRequest.tag)
  
  ::DiscoverTag* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::DiscoverTag* DiscoverRequest::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::DiscoverTag>(GetArenaForAllocation());
    tag_ = p;
  }
  return tag_;
}
inline ::DiscoverTag* DiscoverRequest::mutable_tag() {
  ::DiscoverTag* _msg = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:DiscoverRequest.tag)
  return _msg;
}
inline void DiscoverRequest::set_allocated_tag(::DiscoverTag* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tag_;
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tag);
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:DiscoverRequest.tag)
}

// -------------------------------------------------------------------

// DiscoverResponse

// int32 ret_code = 1;
inline void DiscoverResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t DiscoverResponse::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t DiscoverResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:DiscoverResponse.ret_code)
  return _internal_ret_code();
}
inline void DiscoverResponse::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void DiscoverResponse::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:DiscoverResponse.ret_code)
}

// string res_info = 2;
inline void DiscoverResponse::clear_res_info() {
  res_info_.ClearToEmpty();
}
inline const std::string& DiscoverResponse::res_info() const {
  // @@protoc_insertion_point(field_get:DiscoverResponse.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoverResponse::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 res_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DiscoverResponse.res_info)
}
inline std::string* DiscoverResponse::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:DiscoverResponse.res_info)
  return _s;
}
inline const std::string& DiscoverResponse::_internal_res_info() const {
  return res_info_.Get();
}
inline void DiscoverResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoverResponse::_internal_mutable_res_info() {
  
  return res_info_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoverResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:DiscoverResponse.res_info)
  return res_info_.Release();
}
inline void DiscoverResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(res_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (res_info_.IsDefault()) {
    res_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DiscoverResponse.res_info)
}

// string server_name = 3;
inline void DiscoverResponse::clear_server_name() {
  server_name_.ClearToEmpty();
}
inline const std::string& DiscoverResponse::server_name() const {
  // @@protoc_insertion_point(field_get:DiscoverResponse.server_name)
  return _internal_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoverResponse::set_server_name(ArgT0&& arg0, ArgT... args) {
 
 server_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DiscoverResponse.server_name)
}
inline std::string* DiscoverResponse::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:DiscoverResponse.server_name)
  return _s;
}
inline const std::string& DiscoverResponse::_internal_server_name() const {
  return server_name_.Get();
}
inline void DiscoverResponse::_internal_set_server_name(const std::string& value) {
  
  server_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoverResponse::_internal_mutable_server_name() {
  
  return server_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoverResponse::release_server_name() {
  // @@protoc_insertion_point(field_release:DiscoverResponse.server_name)
  return server_name_.Release();
}
inline void DiscoverResponse::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocated(server_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_name_.IsDefault()) {
    server_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DiscoverResponse.server_name)
}

// .DiscoverTag tag = 4;
inline bool DiscoverResponse::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool DiscoverResponse::has_tag() const {
  return _internal_has_tag();
}
inline void DiscoverResponse::clear_tag() {
  if (GetArenaForAllocation() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
inline const ::DiscoverTag& DiscoverResponse::_internal_tag() const {
  const ::DiscoverTag* p = tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::DiscoverTag&>(
      ::_DiscoverTag_default_instance_);
}
inline const ::DiscoverTag& DiscoverResponse::tag() const {
  // @@protoc_insertion_point(field_get:DiscoverResponse.tag)
  return _internal_tag();
}
inline void DiscoverResponse::unsafe_arena_set_allocated_tag(
    ::DiscoverTag* tag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DiscoverResponse.tag)
}
inline ::DiscoverTag* DiscoverResponse::release_tag() {
  
  ::DiscoverTag* temp = tag_;
  tag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DiscoverTag* DiscoverResponse::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:DiscoverResponse.tag)
  
  ::DiscoverTag* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::DiscoverTag* DiscoverResponse::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::DiscoverTag>(GetArenaForAllocation());
    tag_ = p;
  }
  return tag_;
}
inline ::DiscoverTag* DiscoverResponse::mutable_tag() {
  ::DiscoverTag* _msg = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:DiscoverResponse.tag)
  return _msg;
}
inline void DiscoverResponse::set_allocated_tag(::DiscoverTag* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tag_;
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tag);
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:DiscoverResponse.tag)
}

// string addr = 5;
inline void DiscoverResponse::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& DiscoverResponse::addr() const {
  // @@protoc_insertion_point(field_get:DiscoverResponse.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoverResponse::set_addr(ArgT0&& arg0, ArgT... args) {
 
 addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DiscoverResponse.addr)
}
inline std::string* DiscoverResponse::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:DiscoverResponse.addr)
  return _s;
}
inline const std::string& DiscoverResponse::_internal_addr() const {
  return addr_.Get();
}
inline void DiscoverResponse::_internal_set_addr(const std::string& value) {
  
  addr_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoverResponse::_internal_mutable_addr() {
  
  return addr_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoverResponse::release_addr() {
  // @@protoc_insertion_point(field_release:DiscoverResponse.addr)
  return addr_.Release();
}
inline void DiscoverResponse::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault()) {
    addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DiscoverResponse.addr)
}

// -------------------------------------------------------------------

// RegisterRequest

// string server_name = 1;
inline void RegisterRequest::clear_server_name() {
  server_name_.ClearToEmpty();
}
inline const std::string& RegisterRequest::server_name() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.server_name)
  return _internal_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_server_name(ArgT0&& arg0, ArgT... args) {
 
 server_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterRequest.server_name)
}
inline std::string* RegisterRequest::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:RegisterRequest.server_name)
  return _s;
}
inline const std::string& RegisterRequest::_internal_server_name() const {
  return server_name_.Get();
}
inline void RegisterRequest::_internal_set_server_name(const std::string& value) {
  
  server_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_server_name() {
  
  return server_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_server_name() {
  // @@protoc_insertion_point(field_release:RegisterRequest.server_name)
  return server_name_.Release();
}
inline void RegisterRequest::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocated(server_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_name_.IsDefault()) {
    server_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.server_name)
}

// string addr = 2;
inline void RegisterRequest::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& RegisterRequest::addr() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_addr(ArgT0&& arg0, ArgT... args) {
 
 addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterRequest.addr)
}
inline std::string* RegisterRequest::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:RegisterRequest.addr)
  return _s;
}
inline const std::string& RegisterRequest::_internal_addr() const {
  return addr_.Get();
}
inline void RegisterRequest::_internal_set_addr(const std::string& value) {
  
  addr_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_addr() {
  
  return addr_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_addr() {
  // @@protoc_insertion_point(field_release:RegisterRequest.addr)
  return addr_.Release();
}
inline void RegisterRequest::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault()) {
    addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.addr)
}

// .DiscoverTag tag = 3;
inline bool RegisterRequest::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool RegisterRequest::has_tag() const {
  return _internal_has_tag();
}
inline void RegisterRequest::clear_tag() {
  if (GetArenaForAllocation() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
inline const ::DiscoverTag& RegisterRequest::_internal_tag() const {
  const ::DiscoverTag* p = tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::DiscoverTag&>(
      ::_DiscoverTag_default_instance_);
}
inline const ::DiscoverTag& RegisterRequest::tag() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.tag)
  return _internal_tag();
}
inline void RegisterRequest::unsafe_arena_set_allocated_tag(
    ::DiscoverTag* tag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterRequest.tag)
}
inline ::DiscoverTag* RegisterRequest::release_tag() {
  
  ::DiscoverTag* temp = tag_;
  tag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DiscoverTag* RegisterRequest::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:RegisterRequest.tag)
  
  ::DiscoverTag* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::DiscoverTag* RegisterRequest::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::DiscoverTag>(GetArenaForAllocation());
    tag_ = p;
  }
  return tag_;
}
inline ::DiscoverTag* RegisterRequest::mutable_tag() {
  ::DiscoverTag* _msg = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:RegisterRequest.tag)
  return _msg;
}
inline void RegisterRequest::set_allocated_tag(::DiscoverTag* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tag_;
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tag);
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.tag)
}

// -------------------------------------------------------------------

// RegisterResponse

// int32 ret_code = 1;
inline void RegisterResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t RegisterResponse::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t RegisterResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.ret_code)
  return _internal_ret_code();
}
inline void RegisterResponse::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void RegisterResponse::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:RegisterResponse.ret_code)
}

// string res_info = 2;
inline void RegisterResponse::clear_res_info() {
  res_info_.ClearToEmpty();
}
inline const std::string& RegisterResponse::res_info() const {
  // @@protoc_insertion_point(field_get:RegisterResponse.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterResponse::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 res_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterResponse.res_info)
}
inline std::string* RegisterResponse::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:RegisterResponse.res_info)
  return _s;
}
inline const std::string& RegisterResponse::_internal_res_info() const {
  return res_info_.Get();
}
inline void RegisterResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterResponse::_internal_mutable_res_info() {
  
  return res_info_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:RegisterResponse.res_info)
  return res_info_.Release();
}
inline void RegisterResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(res_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (res_info_.IsDefault()) {
    res_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterResponse.res_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_charon_2eproto
