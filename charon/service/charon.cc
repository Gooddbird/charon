/*************************************************************
 * 
 *  #####   ###   #     #    #		 #     #####    #####     ####
 *    #			 #    #	#	  #			#		#			 #  #	  	#		#		 #
 *    #			 #    #		# #				#				 ###			#####    #		
 *    #			###   #		  #				#				 #   #		#					####
 *
 * charon.cc
 * Generated by tinyrpc framework tinyrpc_generator.py
 * Create Time: 2022-11-13 17:39:07
 * This file will be overwrite every time
*************************************************************/


#include <google/protobuf/service.h>
#include <exception>
#include "tinyrpc/comm/log.h"
#include "charon/pb/charon.pb.h"
#include "charon/service/charon.h"
#include "charon/comm/business_exception.h"
#include "charon/interface/discover_server.h"
#include "charon/interface/register_server.h"
#include "charon/interface/ask_vote.h"
#include "charon/interface/append_log_entries.h"


#define CALL_RPC_INTERFACE(type)                                                                                                    \
  type impl(*request, *response);                                                                                                   \
  response->set_ret_code(0);                                                                                                        \
  response->set_res_info("OK");                                                                                                     \
  try {                                                                                                                             \
    AppInfoLog << "request:{" << request->ShortDebugString() << "}";                                                                \
    impl.run();                                                                                                                     \
    AppInfoLog << "response:{" << response->ShortDebugString() << "}";                                                              \
  } catch (charon::BusinessException& e) {                                                                                 \
    AppErrorLog << "occur BusinessException, error code = " << e.code() << ", errinfo = " << e.error();                             \
    response->set_ret_code(e.code());                                                                                               \
    response->set_res_info(e.error());                                                                                              \
  } catch (std::exception&) {                                                                                                       \
    AppErrorLog << "occur std::exception, error code = -1, errorinfo = UnKnown error ";                                             \
    response->set_ret_code(-1);                                                                                                     \
    response->set_res_info("UnKnown error");                                                                                        \
  } catch (...) {                                                                                                                   \
    AppErrorLog << "occur UnKnown exception, error code = -1, errorinfo = UnKnown error ";                                          \
    response->set_ret_code(-1);                                                                                                     \
    response->set_res_info("UnKnown error");                                                                                        \
  }                                                                                                                                 \
  if (done) {                                                                                                                       \
    done->Run();                                                                                                                    \
  }                                                                                                                                 \

namespace charon {

void CharonServiceImpl::DiscoverServer(::google::protobuf::RpcController* controller,
                       const ::DiscoverRequest* request,
                       ::DiscoverResponse* response,
                       ::google::protobuf::Closure* done){

  CALL_RPC_INTERFACE(DiscoverServerInterface);
}

void CharonServiceImpl::RegisterServer(::google::protobuf::RpcController* controller,
                       const ::RegisterRequest* request,
                       ::RegisterResponse* response,
                       ::google::protobuf::Closure* done){

  CALL_RPC_INTERFACE(RegisterServerInterface);
}

void CharonServiceImpl::AskVote(::google::protobuf::RpcController* controller,
                       const ::AskVoteRequest* request,
                       ::AskVoteResponse* response,
                       ::google::protobuf::Closure* done){

  CALL_RPC_INTERFACE(AskVoteInterface);
}

void CharonServiceImpl::AppendLogEntries(::google::protobuf::RpcController* controller,
                       const ::AppendLogEntriesRequest* request,
                       ::AppendLogEntriesResponse* response,
                       ::google::protobuf::Closure* done){

  CALL_RPC_INTERFACE(AppendLogEntriesInterface);
}



}