/*************************************************************
 * 
 *  #####   ###   #     #    #		 #     #####    #####     ####
 *    #			 #    #	#	  #			#		#			 #  #	  	#		#		 #
 *    #			 #    #		# #				#				 ###			#####    #		
 *    #			###   #		  #				#				 #   #		#					####
 *
 * operate_raft_server_node.cc
 * Generated by tinyrpc framework tinyrpc_generator.py
 * Create Time: 2022-11-19 16:24:34
 * This file will not be overwrite althrough protobuf file changed !!!
 * Just write this file while not exist
*************************************************************/


#include <netinet/in.h>
#include <arpa/inet.h>
#include "tinyrpc/comm/log.h"
#include "charon/interface/operate_raft_server_node.h"
#include "charon/pb/charon.pb.h"
#include "charon/comm/business_exception.h"
#include "charon/comm/util.h"
#include "charon/comm/errcode.h"
#include "charon/raft/raft_node.h"

namespace charon {

OperateRaftServerNodeInterface::OperateRaftServerNodeInterface(const ::OperateRaftServerNodeRequest& request, ::OperateRaftServerNodeResponse& response)
  : m_request(request), 
  m_response(response) {

}

OperateRaftServerNodeInterface::~OperateRaftServerNodeInterface() {

}

void OperateRaftServerNodeInterface::run() {
  //
  // Run your business at here
  // m_reponse.set_ret_code(0);
  // m_reponse.set_res_info("Succ");
  //

  checkInputParam();

  dispatchOperator();

}


void OperateRaftServerNodeInterface::checkInputParam() {
  if (m_request.option() == EN_RAFT_SERVER_OPERATION_UNDEFINE) {
    throw BusinessException(ERR_PARAM_INPUT, "invalid option:" + std::to_string(m_request.option()));
  }

  m_option = m_request.option();


  // if (inet_addr(m_request.server_addr().c_str()) == INADDR_NONE) {
  //   std::string errinfo =  formatString("checkInputParam error, invalid addr:[%s]", m_request.server_addr().c_str());
  //   AppErrorLog << errinfo;
  //   throw BusinessException(ERR_PARAM_INPUT, errinfo);
  // }

}

void OperateRaftServerNodeInterface::dispatchOperator() {
  switch (m_option) {
    case EN_RAFT_SERVER_OPERATION_ADD:
      dealOperatorAdd();
      break;

    case EN_RAFT_SERVER_OPERATION_UPDATE:
      dealOperatorUpdate();
      break;

    case EN_RAFT_SERVER_OPERATION_DELETE:
      dealOperatorDelete();
      break;

    case EN_RAFT_SERVER_OPERATION_QUERY:
      dealOperatorQuery();
      break;
    
    default:
      throw BusinessException(ERR_PARAM_INPUT, "invalid option:" + std::to_string(m_option));
  }
}

void OperateRaftServerNodeInterface::checkAddrInvalid(const std::string& addr) {
  if (inet_addr(addr.c_str()) == INADDR_NONE) {
    std::string errinfo = formatString("checkInputParam error, invalid addr:[%s]", addr.c_str());
    AppErrorLog << errinfo;
    throw BusinessException(ERR_PARAM_INPUT, errinfo);
  }
}


void OperateRaftServerNodeInterface::dealOperatorAdd() {
  ServerNode node = m_request.node();

  checkAddrInvalid(node.addr());

  RaftNode::GetRaftNode()->addRaftServerNode(node);

  m_response.set_allocated_node(&node);

}

void OperateRaftServerNodeInterface::dealOperatorUpdate() {
  ServerNode node = m_request.node();

  checkAddrInvalid(node.addr());

  RaftNode::GetRaftNode()->updateRaftServerNode(node);
  m_response.set_allocated_node(&node);

}

void OperateRaftServerNodeInterface::dealOperatorQuery() {
  ServerNode node = m_request.node();

  RaftNode::GetRaftNode()->queryRaftServerNode(node);

  m_response.set_allocated_node(&node);

}

void OperateRaftServerNodeInterface::dealOperatorDelete() {
  ServerNode node = m_request.node();
  
  RaftNode::GetRaftNode()->deleteRaftServerNode(node);

  m_response.set_allocated_node(&node);

}


}